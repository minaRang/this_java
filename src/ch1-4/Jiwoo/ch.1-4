jdk와 jre차이
->jdk : 자바 개발 도구(JRE + 개발에 필요한 실행파일(javac, exe 등))
->jre : 자바 실행 환경에 중점(JVM+클래스라이브러리:Java API)
컴파일과 빌드 차이
->컴파일 : 소스코드를 목적코드(바이너리 코드)로 바꾸는 것. 빌드의 한 부분
->빌드 : 소드코드 파일을 실행가능한 소프트웨어 산출물로 만드는 과정
jvm의 역할
-> 자바 바이트 코드 파일을 해석하고 실행하게 함.
primitive type이란?
->data의 종류에 따라 구분 됨(논리형/문자형/정수형/실수형)
변수 사용 범위에 따라, 각각 사용 위치에 따른 특징
->?

JVM 의 특징을 설명하세요
->jwm은 os에 종속적이기 때문에 해당 os맞는 jvm이 필요. 
자동 타입 변환이 무엇인지 설명하세요
->자동으로 타입 변환이 일어나는 것
오버플로우/언더플로우 가 무엇인지 설명하세요
->오버플로우 : 타입이 허용하는 최대값을 벗어나는 것
->언더플로우 : 타입이 허용하는 최소값을 벗어나는 것
while 문과 do~while 문의 차이점에 대해 설명하세요
->while문은 시작할 때부터 조건식을 평가하여 블록 내부를 실행할지 결정하지만, 
do-while문은 블로 내부를 먼저 실행시키고, 조건식이 true일 경우 반복 실행
정수를 입력받으면 해당 정수가 짝수인지 홀수인지 판별하는 코드를 작성하세요
->
int a = sc.nextInt();
		
		if(a%2==0) {
			System.out.println("짝수입니다");
		}else {
			System.out.println("홀수입니다");
		}

JVM의 동작 방식에 대해 서술해주세요.
->java.exe
데드락과 데드락이 발생하는 조건에 대해 서술해주세요.
->?
데드락을 예방하는 방법과 데드락을 해결하는 방법을 서술해주세요.
->?
생성자 선언후 nullpointerexception 사용 시 참조형을 사용하면 안되는 이유를 서술해주세요.
equals, contains, ==의 차이점을 서술해주세요.
-> equals:값 자체 비교
-> contains:특정 문자열이 포함되는지 확인
-> ==:대상 간 주소 값 비교

자바 컴파일 과정에 대해 설명하시오.
->자바 소스 파일 작성 후 javac.eve로 바이트 코드 파일(.class)생성
java.exe로 JVM을 구동시킴.
자바는 모든 운영체제에서 실행 가능하다. 어떻게 이것이 가능한지 설명하시오. 
->자바 응용프로그램은 운영체제가 아닌 JVM과 연결되어 있고, JVM은
자바 응용프로그램으로부터 전달받은 명령을 해당 운영체제가 이해할 수 있도록 변환해줌.
그리고 컴파일 언어와 인터프리터 언어의 특징에 대해 설명하시오
->인터프리터 언어 :  소스코드를 한 줄 한 줄 읽어가며 명령을 바로 처리하는 언어.
번역과 실행이 동시에 이루어진다. 
->컴파일 언어 : 소스코드를 한꺼번에 목적 코드로 번역한 후, 한 번에 실행하는 언어. 
컴파일 되면, 실행 가능한 프로그램(파일)이 생성됨. 
byte에서 char 형으로 형 변환 시, 자동 형 변환이 불가능한 이유에 대해 설명하시오
->바이트가 char보다 크기가 작기 때문에 
int a = 32768;을 (short)a, (char)a으로 각각 강제 형변환할 경우, 발생하는 일에 대해 설명하시오
->(short)a : -32768 (32767+1)
->(char) : 해당하는 유니코드로 변환
if문과 switch ~ case문의 차이를 설명하시오.
-> if문은 조건식의 결과가 true, false에 따라 실행 여부가 결정되고
switch ~case는 변수의 값에 따라서 해당하는 case의 실행문이 결정됨

강제 타입 변환과 자동 타입 변환에 대해 작성하기 
->강제 타입 변환 : 큰 허용 범위 타입을 작은 허용 범위 타입으로 쪼개서 저장하는 것
다음 연산으로 실행되는 데이터 타입 작성하기 (1)-byte (2)byte+byte (3)int+long 
(1)int (2)int (3)long
정수를 입력받고, 7로 나누었을 때 나머지가 0이 아니면 "X"출력 후 반복, 0이면 "종료"출력 후 종료되는 반복문 코드 작성하기 
->
int a;
		
		do {
			a = sc.nextInt();
			
			if(a%7!=0) {
				System.out.println("x");
			}else {
				System.out.println("종료");
			}
		}while(a%7!=0);

2023년 1월 1일을 printf() 메서드를 이용하여 출력하는 코드 작성하기 
->
		String newYear="2023년 1월 1일";
		System.out.printf("%s",newYear);
        System.out.printf("%d년 %d월 %d일", 2023,1,1);
++피연산자, 피연산자++ 설명하기
->++피연산자 : 피연산자의 값을 1 증가시킴
->피연산자++ : 다른 연산을 수행 후 1 증가 시킴